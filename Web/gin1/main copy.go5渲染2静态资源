package main

import (
	"html/template"
	"time"

	"github.com/gin-gonic/gin"
)

//渲染2静态资源
type Article struct {
	Title   string `json:"title"`
	Desc    string `json:"desc"`
	Content string `json:"content"`
	Length  int    `json:"length"`
}

//自定义的函数
func UnixToTime(timestamp int) string {
	t := time.Unix(int64(timestamp), 0) //ms,μs
	return t.Format("2006-01-02 15:05:04")
}

func main() {
	router := gin.Default()
	//自定义模板函数 在加载模板前
	router.SetFuncMap(template.FuncMap{
		"UnixToTime": UnixToTime,
	})
	//配置加载模板的路径
	router.LoadHTMLGlob("templates/**/*") //常用的
	//配置静态web目录(url,path)
	router.Static("static", "static")
	router.GET("/", func(c *gin.Context) {
		a := &Article{
			Title:   "标题",
			Desc:    "描述",
			Content: "内容",
			Length:  61,
		}
		c.HTML(200, "admin/index.html", gin.H{
			"article": a,
			"slice": []interface{}{
				&Article{
					Title:   "标题",
					Desc:    "描述",
					Content: "内容",
					Length:  61,
				},
				&Article{
					Title:   "标题1",
					Desc:    "描述",
					Content: "内容2",
					Length:  80,
				},
			},
			"date": 1999999,
		}) //状态码 模板名称 空接口对象
	})
	router.Run() //默认:8080
}
