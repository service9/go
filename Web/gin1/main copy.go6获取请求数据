package main

import (
	"encoding/xml"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
)

//获取请求数据

type UserInfo struct {
	//表单对应
	Username string `json:"username" form:"username"`
	Password string `json:"password" form:"password"`
}

type Article struct {
	//xml对应
	Title   string `json:"title" xml:"title"`
	Content string `json:"content" xml:"content"`
}

func main() {
	router := gin.Default()
	router.LoadHTMLGlob("templates/**/*")
	router.Static("/static","static")
	//获取get请求参数
	router.GET("/query", func(ctx *gin.Context) {
		username := ctx.Query("username")
		age := ctx.Query("age")
		sex := ctx.Query("sex")
		page := ctx.DefaultQuery("page", "1") //获取不到就赋默认值
		ctx.JSON(http.StatusOK, gin.H{
			"username": username,
			"age":      age,
			"sex":      sex,
			"page":     page,
		})
	})
	// 获取POST的请求参数
	router.POST("/post", func(ctx *gin.Context) {
		//获取请求数据
		username := ctx.PostForm("username")
		password := ctx.PostForm("password")
		//响应
		ctx.JSON(http.StatusOK, gin.H{
			"username": username,
			"password": password,
		})
	})
	// 表单演示
	router.GET("/form", func(ctx *gin.Context) {
		ctx.HTML(http.StatusOK, "admin/news.html", "")
	})
	router.POST("/struct", func(ctx *gin.Context) {
		//将数据绑定到结构体中,不用一一取值，直接给空实现绑定数据
		// var userInfo UserInfo
		userInfo := &UserInfo{}
		userInfo1 := &UserInfo{}
		if err := ctx.ShouldBind(&userInfo); err != nil {
			ctx.JSON(http.StatusBadRequest, gin.H{"err": err.Error()})
		} else {
			userInfo1.Password = "1234"
			ctx.JSON(http.StatusOK, gin.H{
				"0": userInfo,
				"1": userInfo1,
			})
		}
	})
	//获取XML数据
	router.POST("/xml", func(ctx *gin.Context) {
		// var article Article
		article := &Article{}
		xmlSliceData, _ := ctx.GetRawData() //从ctx.Request.Body读取数据
		//将切片转为结构体(和json字符串转为结构体类似)
		if err := xml.Unmarshal(xmlSliceData, article); err != nil {
			fmt.Println(xmlSliceData)
			ctx.JSON(http.StatusBadRequest, gin.H{"err": err.Error()}) //400
		} else {
			ctx.JSON(http.StatusOK, article)
		}

	})
	//get动态路由
	// /123->cid=123
	router.GET("/:cid", func(ctx *gin.Context) {
		cid := ctx.Param("cid")
		ctx.String(200, cid+"\n")
		ctx.String(200, "cid:%v", cid)
	})
	router.Run()
}
